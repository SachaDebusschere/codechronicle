name: G√©n√©ration Automatique d'Articles

permissions:
    contents: write
    issues: write
    pull-requests: write

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize]

jobs:
  generate-article:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      
      - name: Install dependencies
        run: |
            npm install
      
      - name: G√©n√©ration des articles
        id: generate
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "R√©pertoire de travail : $(pwd)"
          echo "Contenu du r√©pertoire courant :"
          ls -la
          echo "Contenu du dossier blog :"
          ls -la blog/
          
          # V√©rifier que la cl√© API est bien pr√©sente
          echo "Cl√© API (masqu√©e) : ${OPENAI_API_KEY:0:4}****"
          
          # Trouver tous les fichiers .md dans le dossier blog
          for file in blog/*.md; do
            if [ -f "$file" ]; then
              echo "Traitement du fichier : $file"
              node scripts/generateArticleOui.js "$file"
            fi
          done
          
          # R√©cup√©rer la liste des fichiers g√©n√©r√©s
          generated_files=$(find blog -name "*.md" -type f)
          echo "generated_files=${generated_files}" >> $GITHUB_OUTPUT
          
          # V√©rifier si le fichier de m√©tadonn√©es existe
          if [ -f "article-metadata.json" ]; then
            echo "metadata_exists=true" >> $GITHUB_OUTPUT
          else
            echo "metadata_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit et push des changements
        if: steps.generate.outputs.generated_files != ''
        run: |
          git config --local user.email "sacha.debusschere.sd@gmail.com"
          git config --local user.name "Sacha Debusschere"
          git add blog/ article-metadata.json
          git commit -m "G√©n√©ration automatique d'articles"
          git push
      
      - name: Cr√©er un artefact avec les articles g√©n√©r√©s
        if: steps.generate.outputs.generated_files != ''
        uses: actions/upload-artifact@v4
        with:
          name: articles-generes
          path: |
            blog/
            article-metadata.json
      
      - name: Ajouter un commentaire sur la PR avec les m√©tadonn√©es
        if: steps.generate.outputs.metadata_exists == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            try {
              // Lire le fichier de m√©tadonn√©es
              const metadata = JSON.parse(fs.readFileSync('article-metadata.json', 'utf8'));
              
              if (metadata && metadata.length > 0) {
                // Construire le message de commentaire
                let commentBody = "## Articles g√©n√©r√©s par l'IA ü§ñ\n\n";
                
                metadata.forEach(article => {
                  commentBody += `### ${article.title}\n`;
                  commentBody += `**R√©sum√©**: ${article.summary}\n\n`;
                  commentBody += `Fichier: \`blog/${article.file}.md\`\n\n`;
                  commentBody += "---\n\n";
                });
                
                // Ajouter le commentaire √† la PR
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
                
                console.log('Commentaire ajout√© √† la PR avec les d√©tails des articles');
              } else {
                console.log('Aucune m√©tadonn√©e d\'article trouv√©e');
              }
            } catch (error) {
              console.error('Erreur lors de la lecture des m√©tadonn√©es:', error);
              
              // Ajouter un commentaire de secours si les m√©tadonn√©es ne peuvent pas √™tre lues
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: "Les articles ont √©t√© g√©n√©r√©s, mais les d√©tails n'ont pas pu √™tre r√©cup√©r√©s."
              });
            }
            
      - name: Envoyer les notifications Discord
        if: steps.generate.outputs.metadata_exists == 'true'
        run: |
          # Installer jq si n√©cessaire
          if ! command -v jq &> /dev/null; then
            echo "Installation de jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi
          
          # Lire le fichier de m√©tadonn√©es
          if [ -f "article-metadata.json" ]; then
            # Utiliser jq pour traiter le JSON
            articles=$(cat article-metadata.json)
            count=$(echo "$articles" | jq length)
            
            for i in $(seq 0 $(($count-1))); do
              title=$(echo "$articles" | jq -r ".[$i].title")
              summary=$(echo "$articles" | jq -r ".[$i].summary")
              
              # Utilisez jq pour cr√©er le payload JSON complet avec √©chappement automatique
              payload=$(jq -n \
                --arg title "$title" \
                --arg summary "$summary" \
                '{
                  username: "BOT de Springfield",
                  embeds: [{
                    title: "Nouvel article g√©n√©r√©",
                    description: "**Titre**: " + $title + "\n\n**R√©sum√©**: " + $summary + "\n\nLe lien de l\"article arrive bient√¥t !",
                    color: 8388736,
                    footer: {
                      text: "Github Actions - Automatisation"
                    }
                  }]
                }')
              
              # Envoyer la notification Discord
              curl -H "Content-Type: application/json" -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" -d "$payload"
              
              echo "Notification Discord envoy√©e pour l'article: $title"
              sleep 1
            done
          else
            echo "Aucun fichier de m√©tadonn√©es trouv√©, impossible d'envoyer les notifications Discord"
          fi
      